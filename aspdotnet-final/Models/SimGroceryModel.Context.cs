//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace aspdotnet_final.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SimGroceryEntities : DbContext
    {
        public SimGroceryEntities()
            : base("name=SimGroceryEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tConfig> tConfigs { get; set; }
        public virtual DbSet<tContainer> tContainers { get; set; }
        public virtual DbSet<tCoupon> tCoupons { get; set; }
        public virtual DbSet<tCouponDetail> tCouponDetails { get; set; }
        public virtual DbSet<tCouponSource> tCouponSources { get; set; }
        public virtual DbSet<tDiscountType> tDiscountTypes { get; set; }
        public virtual DbSet<tEmpl> tEmpls { get; set; }
        public virtual DbSet<tEmplHistory> tEmplHistories { get; set; }
        public virtual DbSet<tEmplStatu> tEmplStatus { get; set; }
        public virtual DbSet<tEmplTitle> tEmplTitles { get; set; }
        public virtual DbSet<tLoyalty> tLoyalties { get; set; }
        public virtual DbSet<tManufacturer> tManufacturers { get; set; }
        public virtual DbSet<tNumber> tNumbers { get; set; }
        public virtual DbSet<tProduct> tProducts { get; set; }
        public virtual DbSet<tServing_size_UOM> tServing_size_UOM { get; set; }
        public virtual DbSet<tStore> tStores { get; set; }
        public virtual DbSet<tStoreHistory> tStoreHistories { get; set; }
        public virtual DbSet<tStoreStatu> tStoreStatus { get; set; }
        public virtual DbSet<tSupplyChain> tSupplyChains { get; set; }
        public virtual DbSet<tTransaction> tTransactions { get; set; }
        public virtual DbSet<tTransactionDetail> tTransactionDetails { get; set; }
        public virtual DbSet<tTransactionType> tTransactionTypes { get; set; }
        public virtual DbSet<tUOM> tUOMs { get; set; }
        public virtual DbSet<tBrand> tBrands { get; set; }
        public virtual DbSet<tName> tNames { get; set; }
        public virtual DbSet<vAllTransactionsOfTopSpendingLoyaltyNumber> vAllTransactionsOfTopSpendingLoyaltyNumbers { get; set; }
        public virtual DbSet<vAvery> vAveries { get; set; }
        public virtual DbSet<vCountOfTransactionsByStoreAndLoyalty> vCountOfTransactionsByStoreAndLoyalties { get; set; }
        public virtual DbSet<vCoupon> vCoupons { get; set; }
        public virtual DbSet<vCouponDetailsCurrentlyOpen> vCouponDetailsCurrentlyOpens { get; set; }
        public virtual DbSet<vCouponInfo> vCouponInfoes { get; set; }
        public virtual DbSet<vCouponsCurrentlyOpen> vCouponsCurrentlyOpens { get; set; }
        public virtual DbSet<vCurrentStoreStatusForAllStore> vCurrentStoreStatusForAllStores { get; set; }
        public virtual DbSet<vCurrentStoreStatusForAllStores_Step1> vCurrentStoreStatusForAllStores_Step1 { get; set; }
        public virtual DbSet<vEmpl> vEmpls { get; set; }
        public virtual DbSet<vEmplCountWhoAreCurrentlyEmployedByStore> vEmplCountWhoAreCurrentlyEmployedByStores { get; set; }
        public virtual DbSet<vEmplDDL> vEmplDDLs { get; set; }
        public virtual DbSet<vEmplGridViewReadOnly> vEmplGridViewReadOnlies { get; set; }
        public virtual DbSet<vEmplMostCurrentStatusDateChange> vEmplMostCurrentStatusDateChanges { get; set; }
        public virtual DbSet<vEmployeeWhoCanBeAStoreManager> vEmployeeWhoCanBeAStoreManagers { get; set; }
        public virtual DbSet<vHourlySalesByCalendarDay> vHourlySalesByCalendarDays { get; set; }
        public virtual DbSet<vHourlySalesByCalendarDayGroupedByStore> vHourlySalesByCalendarDayGroupedByStores { get; set; }
        public virtual DbSet<vLoyaltyIDThatHasBroughtTheMostGrocery> vLoyaltyIDThatHasBroughtTheMostGroceries { get; set; }
        public virtual DbSet<vMostExpensiveTransactionsByLoyaltyNumberAndTotalPrice> vMostExpensiveTransactionsByLoyaltyNumberAndTotalPrices { get; set; }
        public virtual DbSet<vNumberOfEachTransactionType> vNumberOfEachTransactionTypes { get; set; }
        public virtual DbSet<vProductDDL> vProductDDLs { get; set; }
        public virtual DbSet<vProductInfo> vProductInfoes { get; set; }
        public virtual DbSet<vProductSalesByHours_NonPrime> vProductSalesByHours_NonPrime { get; set; }
        public virtual DbSet<vProductSalesByHours_Prime> vProductSalesByHours_Prime { get; set; }
        public virtual DbSet<vPurchasesAtStore> vPurchasesAtStores { get; set; }
        public virtual DbSet<vPurchaseTotal> vPurchaseTotals { get; set; }
        public virtual DbSet<vStoreStatusTable> vStoreStatusTables { get; set; }
        public virtual DbSet<vStoreStatusThatIsClosedButNotClosedForever> vStoreStatusThatIsClosedButNotClosedForevers { get; set; }
        public virtual DbSet<vTop10ProductsByQtyOfProduct> vTop10ProductsByQtyOfProduct { get; set; }
        public virtual DbSet<vTop15MostLoyalCustomers> vTop15MostLoyalCustomers { get; set; }
        public virtual DbSet<vTop5CustomersReceivingRefunds> vTop5CustomersReceivingRefunds { get; set; }
        public virtual DbSet<vTopSellingProductByTotalAmount> vTopSellingProductByTotalAmounts { get; set; }
        public virtual DbSet<vTopSpendingLoyaltyNumber> vTopSpendingLoyaltyNumbers { get; set; }
        public virtual DbSet<vTotalAmountByTransactionType> vTotalAmountByTransactionTypes { get; set; }
        public virtual DbSet<vTotalSalesByProduct> vTotalSalesByProducts { get; set; }
    
        [DbFunction("SimGroceryEntities", "fEmployeesWhoCanBeAStoreManager")]
        public virtual IQueryable<fEmployeesWhoCanBeAStoreManager_Result> fEmployeesWhoCanBeAStoreManager()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fEmployeesWhoCanBeAStoreManager_Result>("[SimGroceryEntities].[fEmployeesWhoCanBeAStoreManager]()");
        }
    
        [DbFunction("SimGroceryEntities", "fGetCouponDetailsCurrentlyOpenByProductID")]
        public virtual IQueryable<fGetCouponDetailsCurrentlyOpenByProductID_Result> fGetCouponDetailsCurrentlyOpenByProductID(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fGetCouponDetailsCurrentlyOpenByProductID_Result>("[SimGroceryEntities].[fGetCouponDetailsCurrentlyOpenByProductID](@productID)", productIDParameter);
        }
    
        [DbFunction("SimGroceryEntities", "fGetCouponInfo")]
        public virtual IQueryable<fGetCouponInfo_Result> fGetCouponInfo(Nullable<int> couponID)
        {
            var couponIDParameter = couponID.HasValue ?
                new ObjectParameter("couponID", couponID) :
                new ObjectParameter("couponID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fGetCouponInfo_Result>("[SimGroceryEntities].[fGetCouponInfo](@couponID)", couponIDParameter);
        }
    
        [DbFunction("SimGroceryEntities", "fGetCouponsOpen")]
        public virtual IQueryable<fGetCouponsOpen_Result> fGetCouponsOpen(Nullable<System.DateTime> couponDate)
        {
            var couponDateParameter = couponDate.HasValue ?
                new ObjectParameter("couponDate", couponDate) :
                new ObjectParameter("couponDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fGetCouponsOpen_Result>("[SimGroceryEntities].[fGetCouponsOpen](@couponDate)", couponDateParameter);
        }
    
        [DbFunction("SimGroceryEntities", "fGetCurrentEmplStatus")]
        public virtual IQueryable<fGetCurrentEmplStatus_Result> fGetCurrentEmplStatus(Nullable<int> emplID)
        {
            var emplIDParameter = emplID.HasValue ?
                new ObjectParameter("EmplID", emplID) :
                new ObjectParameter("EmplID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fGetCurrentEmplStatus_Result>("[SimGroceryEntities].[fGetCurrentEmplStatus](@EmplID)", emplIDParameter);
        }
    
        [DbFunction("SimGroceryEntities", "fGetCurrentStoreStatus")]
        public virtual IQueryable<fGetCurrentStoreStatus_Result> fGetCurrentStoreStatus(Nullable<int> storeID)
        {
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fGetCurrentStoreStatus_Result>("[SimGroceryEntities].[fGetCurrentStoreStatus](@StoreID)", storeIDParameter);
        }
    
        [DbFunction("SimGroceryEntities", "fGetEmplStatus_CanWork")]
        public virtual IQueryable<fGetEmplStatus_CanWork_Result> fGetEmplStatus_CanWork()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fGetEmplStatus_CanWork_Result>("[SimGroceryEntities].[fGetEmplStatus_CanWork]()");
        }
    
        [DbFunction("SimGroceryEntities", "fGetStoreInfo")]
        public virtual IQueryable<fGetStoreInfo_Result> fGetStoreInfo(string store)
        {
            var storeParameter = store != null ?
                new ObjectParameter("Store", store) :
                new ObjectParameter("Store", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fGetStoreInfo_Result>("[SimGroceryEntities].[fGetStoreInfo](@Store)", storeParameter);
        }
    
        [DbFunction("SimGroceryEntities", "fTotalSalesByProduct")]
        public virtual IQueryable<fTotalSalesByProduct_Result> fTotalSalesByProduct(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fTotalSalesByProduct_Result>("[SimGroceryEntities].[fTotalSalesByProduct](@ProductID)", productIDParameter);
        }
    
        [DbFunction("SimGroceryEntities", "zzzSQLInjection")]
        public virtual IQueryable<zzzSQLInjection_Result> zzzSQLInjection(string store)
        {
            var storeParameter = store != null ?
                new ObjectParameter("Store", store) :
                new ObjectParameter("Store", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<zzzSQLInjection_Result>("[SimGroceryEntities].[zzzSQLInjection](@Store)", storeParameter);
        }
    
        public virtual int spAddEmpl(string firstName, string lastName, string empl, Nullable<int> storeID, Nullable<int> emplTitleID, Nullable<int> emplStatusID)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emplParameter = empl != null ?
                new ObjectParameter("Empl", empl) :
                new ObjectParameter("Empl", typeof(string));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var emplTitleIDParameter = emplTitleID.HasValue ?
                new ObjectParameter("EmplTitleID", emplTitleID) :
                new ObjectParameter("EmplTitleID", typeof(int));
    
            var emplStatusIDParameter = emplStatusID.HasValue ?
                new ObjectParameter("EmplStatusID", emplStatusID) :
                new ObjectParameter("EmplStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddEmpl", firstNameParameter, lastNameParameter, emplParameter, storeIDParameter, emplTitleIDParameter, emplStatusIDParameter);
        }
    
        public virtual ObjectResult<spAddStore_Result> spAddStore(string storeNumber, string store, string address1, string address2, string city, string state, string zip, Nullable<int> managerID)
        {
            var storeNumberParameter = storeNumber != null ?
                new ObjectParameter("StoreNumber", storeNumber) :
                new ObjectParameter("StoreNumber", typeof(string));
    
            var storeParameter = store != null ?
                new ObjectParameter("Store", store) :
                new ObjectParameter("Store", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAddStore_Result>("spAddStore", storeNumberParameter, storeParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipParameter, managerIDParameter);
        }
    
        public virtual ObjectResult<spAddStoreWithStoreStatus_Result> spAddStoreWithStoreStatus(string storeNumber, string store, string address1, string address2, string city, string state, string zip, Nullable<int> managerID, Nullable<int> storeStatusID)
        {
            var storeNumberParameter = storeNumber != null ?
                new ObjectParameter("StoreNumber", storeNumber) :
                new ObjectParameter("StoreNumber", typeof(string));
    
            var storeParameter = store != null ?
                new ObjectParameter("Store", store) :
                new ObjectParameter("Store", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            var storeStatusIDParameter = storeStatusID.HasValue ?
                new ObjectParameter("StoreStatusID", storeStatusID) :
                new ObjectParameter("StoreStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAddStoreWithStoreStatus_Result>("spAddStoreWithStoreStatus", storeNumberParameter, storeParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipParameter, managerIDParameter, storeStatusIDParameter);
        }
    
        public virtual int spAddTransactionAndDetail(Nullable<int> loyaltyID, string dateOfTransaction, string timeOfTransaction, Nullable<int> transactionTypeID, Nullable<int> storeID, Nullable<int> emplID, Nullable<int> productID, Nullable<int> qty, string pricePerSellableUnit, string totalPrice, string transactionComment, string transactionDetailComment, Nullable<int> couponDetailID, ObjectParameter transactionID)
        {
            var loyaltyIDParameter = loyaltyID.HasValue ?
                new ObjectParameter("LoyaltyID", loyaltyID) :
                new ObjectParameter("LoyaltyID", typeof(int));
    
            var dateOfTransactionParameter = dateOfTransaction != null ?
                new ObjectParameter("DateOfTransaction", dateOfTransaction) :
                new ObjectParameter("DateOfTransaction", typeof(string));
    
            var timeOfTransactionParameter = timeOfTransaction != null ?
                new ObjectParameter("TimeOfTransaction", timeOfTransaction) :
                new ObjectParameter("TimeOfTransaction", typeof(string));
    
            var transactionTypeIDParameter = transactionTypeID.HasValue ?
                new ObjectParameter("TransactionTypeID", transactionTypeID) :
                new ObjectParameter("TransactionTypeID", typeof(int));
    
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var emplIDParameter = emplID.HasValue ?
                new ObjectParameter("EmplID", emplID) :
                new ObjectParameter("EmplID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var pricePerSellableUnitParameter = pricePerSellableUnit != null ?
                new ObjectParameter("PricePerSellableUnit", pricePerSellableUnit) :
                new ObjectParameter("PricePerSellableUnit", typeof(string));
    
            var totalPriceParameter = totalPrice != null ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(string));
    
            var transactionCommentParameter = transactionComment != null ?
                new ObjectParameter("TransactionComment", transactionComment) :
                new ObjectParameter("TransactionComment", typeof(string));
    
            var transactionDetailCommentParameter = transactionDetailComment != null ?
                new ObjectParameter("TransactionDetailComment", transactionDetailComment) :
                new ObjectParameter("TransactionDetailComment", typeof(string));
    
            var couponDetailIDParameter = couponDetailID.HasValue ?
                new ObjectParameter("couponDetailID", couponDetailID) :
                new ObjectParameter("couponDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddTransactionAndDetail", loyaltyIDParameter, dateOfTransactionParameter, timeOfTransactionParameter, transactionTypeIDParameter, storeIDParameter, emplIDParameter, productIDParameter, qtyParameter, pricePerSellableUnitParameter, totalPriceParameter, transactionCommentParameter, transactionDetailCommentParameter, couponDetailIDParameter, transactionID);
        }
    
        public virtual int spAddTransactionDetail(Nullable<int> transactionID, Nullable<int> productID, Nullable<int> qty, string pricePerSellableUnit, string totalPrice, string transactionDetailComment, Nullable<int> couponDetailID, ObjectParameter transactionDetailID)
        {
            var transactionIDParameter = transactionID.HasValue ?
                new ObjectParameter("TransactionID", transactionID) :
                new ObjectParameter("TransactionID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var pricePerSellableUnitParameter = pricePerSellableUnit != null ?
                new ObjectParameter("PricePerSellableUnit", pricePerSellableUnit) :
                new ObjectParameter("PricePerSellableUnit", typeof(string));
    
            var totalPriceParameter = totalPrice != null ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(string));
    
            var transactionDetailCommentParameter = transactionDetailComment != null ?
                new ObjectParameter("TransactionDetailComment", transactionDetailComment) :
                new ObjectParameter("TransactionDetailComment", typeof(string));
    
            var couponDetailIDParameter = couponDetailID.HasValue ?
                new ObjectParameter("couponDetailID", couponDetailID) :
                new ObjectParameter("couponDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddTransactionDetail", transactionIDParameter, productIDParameter, qtyParameter, pricePerSellableUnitParameter, totalPriceParameter, transactionDetailCommentParameter, couponDetailIDParameter, transactionDetailID);
        }
    
        public virtual int spInitEmplHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInitEmplHistory");
        }
    
        public virtual int spInitStoreHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInitStoreHistory");
        }
    
        public virtual int spUpdateEmplStatus(Nullable<int> emplID, Nullable<int> emplStatusID, Nullable<System.DateTime> startDate)
        {
            var emplIDParameter = emplID.HasValue ?
                new ObjectParameter("EmplID", emplID) :
                new ObjectParameter("EmplID", typeof(int));
    
            var emplStatusIDParameter = emplStatusID.HasValue ?
                new ObjectParameter("EmplStatusID", emplStatusID) :
                new ObjectParameter("EmplStatusID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateEmplStatus", emplIDParameter, emplStatusIDParameter, startDateParameter);
        }
    
        public virtual int spUpdateStoreStatus(Nullable<int> storeID, Nullable<int> storeStatusID, Nullable<System.DateTime> startDate)
        {
            var storeIDParameter = storeID.HasValue ?
                new ObjectParameter("StoreID", storeID) :
                new ObjectParameter("StoreID", typeof(int));
    
            var storeStatusIDParameter = storeStatusID.HasValue ?
                new ObjectParameter("StoreStatusID", storeStatusID) :
                new ObjectParameter("StoreStatusID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateStoreStatus", storeIDParameter, storeStatusIDParameter, startDateParameter);
        }
    }
}
